// Generated by IcedCoffeeScript 1.3.1b
var View,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

View = (function() {

  View.name = 'View';

  function View(container) {
    this.notify = __bind(this.notify, this);

    this.register = __bind(this.register, this);

    this.display = __bind(this.display, this);

    this.translate = __bind(this.translate, this);
    this.handlers = {
      'translate': null
    };
    this.canvas = document.createElement("canvas");
    this.canvas.width = container.width;
    this.canvas.height = container.height;
    this.ctx = canvas.getContext('2d');
    contrainer.appendChild(this.canvas);
    this.observers = [];
    this.position({
      x: 0.0,
      y: 0.0
    });
    this.scale = 1.0;
  }

  View.prototype.translate = function(x, y) {
    this.position.x += x;
    return this.position.y += y;
  };

  View.prototype.display = function() {
    this.ctx.save();
    return this.ctx.translate(x);
  };

  View.prototype.attach = function(observer) {
    return this.observers.push(observer);
  };

  View.prototype.register = function(type, callback) {
    var oldLoaded;
    oldLoaded = this.handlers[type];
    if (this.handlers[type]) {
      return this.handlers[type] = function(view) {
        if (oldLoaded) oldLoaded(view);
        return callback(view);
      };
    } else {
      return this.handlers[type] = callback;
    }
  };

  View.prototype.notify = function(type) {
    if (this.handlers[type]) return this.handlers[type](this);
  };

  return View;

})();
