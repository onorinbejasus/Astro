// Generated by IcedCoffeeScript 1.3.1b
var View,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

View = (function() {

  View.name = 'View';

  function View(container) {
    this.panScroll = __bind(this.panScroll, this);

    this.panUp = __bind(this.panUp, this);

    this.panMove = __bind(this.panMove, this);

    this.panDown = __bind(this.panDown, this);

    this.imageRequestManager = __bind(this.imageRequestManager, this);

    this.notify = __bind(this.notify, this);

    this.register = __bind(this.register, this);

    this.display = __bind(this.display, this);

    this.setScale = __bind(this.setScale, this);

    this.addScale = __bind(this.addScale, this);

    this.jump = __bind(this.jump, this);

    this.translate = __bind(this.translate, this);

    var click,
      _this = this;
    this.handlers = {
      'translate': null,
      'scale': null
    };
    this.mouseState = 0;
    this.mouseCoords = {
      x: 0,
      y: 0
    };
    this.canvas = document.createElement("canvas");
    this.canvas.width = container.clientWidth;
    this.canvas.height = container.clientHeight;
    this.canvas.style.backgroundColor = "rgb(0,0,0)";
    this.map = {};
    this.mouseHandler(this.canvas);
    this.ctx = this.canvas.getContext('2d');
    this.ctx.globalCompositeOperation = "lighter";
    container.appendChild(this.canvas);
    this.observers = [];
    this.position = {
      x: 0.0,
      y: 0.0
    };
    this.pixelTranslation = {
      x: this.canvas.width / 2,
      y: this.canvas.height / 2
    };
    this.scale = 1.8;
    this.range = {
      lowX: 0,
      lowY: 0,
      highX: 0,
      highY: 0
    };
    this.register('translate', this.imageRequestManager);
    this.imageRequestManager();
    click = function() {
      _this.display();
      return setTimeout(click, 1000);
    };
    click();
  }

  /*
  	translate
  	Translates X degrees, Y Degrees.
  	Not pixels! Degrees! Going translate(0,1) is a full degree, which is 2 images.
  	Compounds each translate
  	Triggers: 'translate' event
  */


  View.prototype.translate = function(x, y) {
    this.position.x += x;
    this.position.y += y;
    return this.notify('translate', this.position);
  };

  /*
  	jump
  	moves X degrees, Y Degrees.
  	Not pixels! Degrees! Going translate(0,1) is a full degree, which is 2 images.
  	doesn't compound
  	Triggers: 'translate' event
  */


  View.prototype.jump = function(x, y) {
    this.position.x = x;
    this.position.y = y;
    return this.notify('translate', this.position);
  };

  View.prototype.addScale = function(addScale) {
    this.scale += addScale;
    return this.notify('scale', this.scale);
  };

  View.prototype.setScale = function(newScale) {
    this.scale = newScale;
    return this.notify('scale', this.scale);
  };

  /*
  	display:
  		will send requests to all obvservers asking them to draw their
  		images if they have any.
  */


  View.prototype.display = function() {
    var i, j, overlay, zoom, _i, _len, _ref;
    this.ctx.save();
    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
    this.ctx.translate(this.pixelTranslation.x, this.pixelTranslation.y);
    zoom = 1.8 / this.scale;
    this.ctx.translate(-512 * zoom, -512 * zoom);
    this.ctx.translate(this.position.x / .512 * 1024 * zoom, -this.position.y / .512 * 1024 * zoom);
    this.ctx.scale(zoom, zoom);
    i = this.range.lowX;
    while (i <= this.range.highX) {
      j = this.range.lowY;
      while (j < this.range.highY) {
        _ref = this.observers;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          overlay = _ref[_i];
          overlay.update("display", {
            x: i,
            y: j,
            ctx: this.ctx
          });
        }
        j++;
      }
      i++;
    }
    return this.ctx.restore();
  };

  View.prototype.attach = function(observer) {
    this.observers.push(observer);
    return this.updateState(observer);
  };

  View.prototype.register = function(type, callback) {
    var oldLoaded;
    oldLoaded = this.handlers[type];
    if (this.handlers[type]) {
      return this.handlers[type] = function(view) {
        if (oldLoaded) oldLoaded(view);
        return callback(view);
      };
    } else {
      return this.handlers[type] = callback;
    }
  };

  View.prototype.notify = function(type, info) {
    if (this.handlers[type]) return this.handlers[type](info);
  };

  /*
  	Function: imageRequestManager
  	Use: Private function to manage translation and requesting images.
  	Hooked on construction to the translate event handler
  */


  View.prototype.imageRequestManager = function() {
    var i, j, overlay, rangeX, rangeY, _i, _len, _ref;
    rangeX = this.canvas.width * this.scale / 3600.0 * 2;
    rangeY = this.canvas.height * this.scale / 3600.0 * 2;
    this.range.highX = Math.ceil((this.position.x + rangeX) / .512);
    this.range.lowX = Math.floor((this.position.x - rangeX) / .512);
    this.range.highY = Math.ceil((this.position.y + rangeY) / .512);
    this.range.lowY = Math.floor((this.position.y - rangeY) / .512);
    if (this.range.lowX < 0) this.range.lowX = 0;
    i = this.range.lowX;
    while (i <= this.range.highX) {
      j = this.range.lowY;
      while (j <= this.range.highY) {
        if ((this.map[i] != null) && this.map[i][j]) {
          j++;
          continue;
        } else {
          _ref = this.observers;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            overlay = _ref[_i];
            overlay.update('request', {
              x: i,
              y: j
            });
          }
          if (this.map[i] != null) {
            this.map[i][j] = true;
          } else {
            this.map[i] = {};
            this.map[i][j] = true;
          }
        }
        j++;
      }
      i++;
    }
    return this.display();
  };

  View.prototype.updateState = function(observer) {
    var i, j, _results;
    _results = [];
    for (i in this.map) {
      _results.push((function() {
        var _results1;
        _results1 = [];
        for (j in this.map[i]) {
          _results1.push(observer.update('request', {
            x: i,
            y: j
          }));
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  View.prototype.mouseHandler = function(canvas) {
    $(canvas).mousedown(this.panDown);
    $(canvas).mouseup(this.panUp);
    $(canvas).mousemove(this.panMove);
    return this.hookEvent(canvas, "mousewheel", this.panScroll);
  };

  View.prototype.panDown = function(event) {
    this.mouseState = 1;
    this.mouseCoords.x = event.clientX;
    return this.mouseCoords.y = event.clientY;
  };

  View.prototype.panMove = function(event) {
    if (this.mouseState === 1) {
      this.translate((event.clientX - this.mouseCoords.x) / 1000 * 1.8 / this.scale, (-event.clientY + this.mouseCoords.y) / 1000 * 1.8 / this.scale);
      this.mouseCoords.x = event.clientX;
      return this.mouseCoords.y = event.clientY;
    }
  };

  View.prototype.panUp = function(event) {
    return this.mouseState = 0;
  };

  View.prototype.panScroll = function(event) {
    var delta;
    delta = 0;
    if (!event) event = window.event;
    if (event.wheelDelta) {
      delta = event.wheelDelta / 60;
    } else if (event.detail) {
      delta = -event.detail / 2;
    }
    if (delta > 0 && this.scale >= 1.8) {
      this.addScale(-.3);
    } else if (delta <= 0) {
      this.addScale(.3);
    }
    return this.imageRequestManager();
  };

  View.prototype.hookEvent = function(element, eventName, callback) {
    if (typeof element === "string") element = document.getElementById(element);
    if (element === null) return;
    if (element.addEventListener) {
      if (eventName === 'mousewheel') {
        element.addEventListener('DOMMouseScroll', callback, false);
      }
      return element.addEventListener(eventName, callback, false);
    } else if (element.attachEvent) {
      return element.attachEvent("on" + eventName, callback);
    }
  };

  return View;

})();
