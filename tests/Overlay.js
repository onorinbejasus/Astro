// Generated by IcedCoffeeScript 1.3.1b
var ImageProxy, Overlay,
  __slice = [].slice,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

window.iced = {
  Deferrals: (function() {

    function _Class(_arg) {
      this.continuation = _arg;
      this.count = 1;
      this.ret = null;
    }

    _Class.prototype._fulfill = function() {
      if (!--this.count) return this.continuation(this.ret);
    };

    _Class.prototype.defer = function(defer_params) {
      var _this = this;
      ++this.count;
      return function() {
        var inner_params, _ref;
        inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        if (defer_params != null) {
          if ((_ref = defer_params.assign_fn) != null) {
            _ref.apply(null, inner_params);
          }
        }
        return _this._fulfill();
      };
    };

    return _Class;

  })(),
  findDeferral: function() {
    return null;
  }
};
window.__iced_k = window.__iced_k_noop = function() {};

ImageProxy = (function() {

  ImageProxy.name = 'ImageProxy';

  function ImageProxy(imgURL, placeholder) {
    var _this = this;
    this.currentImage = placeholder;
    this.realImage = new Image();
    this.realImage.onload = function() {
      return _this.currentImage = _this.realImage;
    };
    this.realImage.src = imgURL;
  }

  ImageProxy.prototype.display = function() {
    return this.currentImage;
  };

  return ImageProxy;

})();

Overlay = (function() {

  Overlay.name = 'Overlay';

  function Overlay(options, placeholder) {
    this.request = __bind(this.request, this);
    this.buffer = {};
    this.placeholder = placeholder;
    this.type = options.type != null ? options.type : "SDSS";
    this.view = options.view != null ? options.view : null;
    if (this.type === "SDSS") {
      this.requestImage = this.requestSDSS;
    } else {
      this.requestImage = this.requestFIRST;
    }
    if (this.view) this.view.attach(this);
  }

  Overlay.prototype.notify = function(type, info) {
    switch (type) {
      case "display":
        return this.display(info);
      case "request":
        return this.request(info);
      default:
        break;
    }
  };

  Overlay.prototype.request = function(req) {
    var imgProxy, x, y, ___iced_passed_deferral, __iced_deferrals, __iced_k, _ref,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    _ref = [req.x * .512, req.y * .512], x = _ref[0], y = _ref[1];
    if ((this.buffer[x] != null) && (this.buffer[x][y] != null)) {
      return;
      return __iced_k();
    } else {
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/home/sean/site/Astro/tests/Overlay.iced",
          funcname: "Overlay.request"
        });
        _this.requestImage(x, y, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return imgProxy = arguments[0];
            };
          })(),
          lineno: 36
        }));
        __iced_deferrals._fulfill();
      })(function() {
        return __iced_k((_this.buffer[x] != null) ? _this.buffer[x][y] = imgProxy : (_this.buffer[x] = {}, _this.buffer[x][y] = imgProxy));
      });
    }
  };

  Overlay.prototype.display = function(info) {
    if (this.buffer[info.x] && this.buffer[info.x][info.y]) {
      info.ctx.save();
      info.ctx.translate(info.x * 1024, info.y * 1024);
      info.ctx.drawImage(this.buffer[info.x][info.y].display(), 0, 0);
      return info.ctx.restore();
    }
  };

  Overlay.prototype.requestSDSS = function(degX, degY) {};

  Overlay.prototype.requestFIRST = function(degX, degY, cb) {
    var data, decMax, decMin, imgProxy, raMax, raMin, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    decMin = degY - .256;
    decMax = degY + .256;
    raMax = degX - .256;
    raMin = degX + .256;
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "/home/sean/site/Astro/tests/Overlay.iced",
        funcname: "Overlay.requestFIRST"
      });
      $.post("request.php", __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            return data = arguments[0];
          };
        })(),
        lineno: 54
      }), 'text');
      __iced_deferrals._fulfill();
    })(function() {
      imgProxy = new ImageProxy("00000+00000E.fits.jpg", _this.placeholder);
      return cb(imgProxy);
    });
  };

  return Overlay;

})();
