// Generated by IcedCoffeeScript 1.3.1b
(function() {
  var View;

  View = (function() {

    View.name = 'View';

    function View(canvas3dctx, canvas2dctx) {
      this.overlays = [];
      this.canvas2d = canvas2dctx;
      this.gl = canvas3dctx;
      this.camera = {
        "x": 0.0,
        "y": 0.0,
        "z": 2.414213562
      };
      this.displayColor = {
        "R": 0,
        "G": 0,
        "B": 0,
        "A": 1
      };
    }

    View.prototype.requestSDSS = function() {
      return this.overlays.push(new SDSSOverlay(this.gl));
    };

    View.prototype.requestFIRST = function() {
      return this.overlays.push(new Overlay(this.gl));
    };

    View.prototype.requestBox = function(cb) {
      return this.overlays.push(new BoxOverlay(this.canvas2d));
    };

    View.prototype.translate = function(x, y, z) {
      if (-this.camera.x - x > 0) this.camera.x += x;
      if (this.camera.y + y > -90 && this.camera.y + y < 90) this.camera.y += y;
      return this.camera.z += z;
    };

    View.prototype.display = function() {
      var overlay, _i, _len, _ref;
      this.gl.viewport(0, 0, width, height);
      this.gl.clear(this.gl.COLOR_BUFFER_BIT | this.gl.DEPTH_BUFFER_BIT);
      this.gl.clearColor(this.displayColor.R, this.displayColor.G, this.displayColor.B, this.displayColor.A);
      this.gl.perspectiveMatrix.makeIdentity();
      this.gl.perspectiveMatrix.perspective(45, 1, 0.01, 100);
      this.gl.perspectiveMatrix.lookat(this.camera.x, this.camera.y, this.camera.z, this.camera.x, this.camera.y, 0, 0, 1, 0);
      _ref = this.overlays;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        overlay = _ref[_i];
        overlay.display();
      }
      return this.gl.flush();
    };

    return View;

  })();

}).call(this);
