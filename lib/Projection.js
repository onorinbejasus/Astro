// Generated by CoffeeScript 1.3.2
var Projection,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Projection = (function() {

  function Projection(Math) {
    this.Math = Math;
    this.unproject = __bind(this.unproject, this);

    this.getHeader = __bind(this.getHeader, this);

    this.parameters = null;
  }

  Projection.prototype.getHeader = function(image) {
    var _this = this;
    this.parameters = new Object;
    $.ajaxSetup({
      'async': false
    });
    $.getJSON("./imageHeader.php?url=" + image, function(data) {
      return $.each(data, function(key, val) {
        if (key === "CRVAL_1") {
          _this.parameters.crval1 = val;
        }
        if (key === "CRVAL_2") {
          _this.parameters.crval2 = val;
        }
        if (key === "CRPIX_1") {
          _this.parameters.crpix1 = val;
        }
        if (key === "CRPIX_2") {
          _this.parameters.crpix2 = val;
        }
        if (key === "CD1_1") {
          _this.parameters.cd11 = val;
        }
        if (key === "CD1_2") {
          _this.parameters.cd12 = val;
        }
        if (key === "CD2_1") {
          _this.parameters.cd21 = val;
        }
        if (key === "CD2_2") {
          return _this.parameters.cd22 = val;
        }
      });
    });
    $.ajaxSetup({
      'async': true
    });
  };

  Projection.prototype.unproject = function(xsize, ysize) {
    var dec, decpole, dtor, i, j, l, lat, latpole, long, lonpole, lp, m, mat, mp, n, np, phi, r, r11, r12, r13, r21, r22, r23, r31, r32, r33, ra, rapole, rtod, theta, u, v, x, xpix, y, ypix, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9, _results, _results1, _results2, _results3, _results4, _results5, _results6, _results7, _results8, _results9, _s, _t;
    rtod = 57.29577951308323;
    dtor = 0.0174532925;
    xpix = (function() {
      _results = [];
      for (var _i = 1; 1 <= xsize ? _i <= xsize : _i >= xsize; 1 <= xsize ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this);
    ypix = (function() {
      _results1 = [];
      for (var _j = 1; 1 <= ysize ? _j <= ysize : _j >= ysize; 1 <= ysize ? _j++ : _j--){ _results1.push(_j); }
      return _results1;
    }).apply(this);
    ra = (function() {
      _results2 = [];
      for (var _k = 0, _ref = xsize - 1; 0 <= _ref ? _k <= _ref : _k >= _ref; 0 <= _ref ? _k++ : _k--){ _results2.push(_k); }
      return _results2;
    }).apply(this);
    dec = (function() {
      _results3 = [];
      for (var _l = 0, _ref1 = xsize - 1; 0 <= _ref1 ? _l <= _ref1 : _l >= _ref1; 0 <= _ref1 ? _l++ : _l--){ _results3.push(_l); }
      return _results3;
    }).apply(this);
    u = (function() {
      _results4 = [];
      for (var _m = 0, _ref2 = xsize - 1; 0 <= _ref2 ? _m <= _ref2 : _m >= _ref2; 0 <= _ref2 ? _m++ : _m--){ _results4.push(_m); }
      return _results4;
    }).apply(this);
    v = (function() {
      _results5 = [];
      for (var _n = 0, _ref3 = xsize - 1; 0 <= _ref3 ? _n <= _ref3 : _n >= _ref3; 0 <= _ref3 ? _n++ : _n--){ _results5.push(_n); }
      return _results5;
    }).apply(this);
    for (i = _o = 0, _ref4 = xsize - 1; 0 <= _ref4 ? _o <= _ref4 : _o >= _ref4; i = 0 <= _ref4 ? ++_o : --_o) {
      ra[i] = (function() {
        _results6 = [];
        for (var _p = 0, _ref5 = ysize - 1; 0 <= _ref5 ? _p <= _ref5 : _p >= _ref5; 0 <= _ref5 ? _p++ : _p--){ _results6.push(_p); }
        return _results6;
      }).apply(this);
      dec[i] = (function() {
        _results7 = [];
        for (var _q = 0, _ref6 = ysize - 1; 0 <= _ref6 ? _q <= _ref6 : _q >= _ref6; 0 <= _ref6 ? _q++ : _q--){ _results7.push(_q); }
        return _results7;
      }).apply(this);
      u[i] = (function() {
        _results8 = [];
        for (var _r = 0, _ref7 = ysize - 1; 0 <= _ref7 ? _r <= _ref7 : _r >= _ref7; 0 <= _ref7 ? _r++ : _r--){ _results8.push(_r); }
        return _results8;
      }).apply(this);
      v[i] = (function() {
        _results9 = [];
        for (var _s = 0, _ref8 = ysize - 1; 0 <= _ref8 ? _s <= _ref8 : _s >= _ref8; 0 <= _ref8 ? _s++ : _s--){ _results9.push(_s); }
        return _results9;
      }).apply(this);
      for (j = _t = 0, _ref9 = ysize - 1; 0 <= _ref9 ? _t <= _ref9 : _t >= _ref9; j = 0 <= _ref9 ? ++_t : --_t) {
        y = this.parameters.cd11 * (xpix[i] - this.parameters.crpix1) + this.parameters.cd12 * (ypix[j] - this.parameters.crpix2);
        x = this.parameters.cd21 * (xpix[i] - this.parameters.crpix1) + this.parameters.cd22 * (ypix[j] - this.parameters.crpix2);
        long = this.Math.arg(-y, x);
        lat = (Math.PI / 2.0) * dtor;
        r = Math.sqrt(Math.pow(x, 2), Math.pow(y, 2));
        if (r > 0.0) {
          lat = Math.atan((180.0 / Math.PI) / r);
        }
        l = Math.cos(lat) * Math.cos(long);
        m = Math.cos(lat) * Math.sin(long);
        n = Math.sin(lat);
        phi = 0.0;
        theta = 90.0 * dtor;
        lonpole = this.parameters.crval1 > theta ? 0.0 : 180.0 * dtor;
        latpole = 90.0 * dtor;
        rapole = this.parameters.crval2 * dtor;
        decpole = this.parameters.crval1 * dtor;
        r11 = -1.0 * Math.sin(rapole) * Math.sin(lonpole) - Math.cos(rapole) * Math.cos(lonpole) * Math.sin(decpole);
        r12 = Math.cos(rapole) * Math.sin(lonpole) - Math.sin(rapole) * Math.cos(lonpole) * Math.sin(decpole);
        r13 = Math.cos(lonpole) * Math.cos(decpole);
        r21 = Math.sin(rapole) * Math.cos(lonpole) - Math.cos(rapole) * Math.sin(lonpole) * Math.sin(decpole);
        r22 = -1.0 * Math.cos(rapole) * Math.cos(lonpole) - Math.sin(rapole) * Math.sin(lonpole) * Math.sin(decpole);
        r23 = Math.sin(lonpole) * Math.cos(decpole);
        r31 = Math.cos(rapole) * Math.cos(decpole);
        r32 = Math.sin(rapole) * Math.cos(decpole);
        r33 = Math.sin(decpole);
        mat = [[r11, r21, r31], [r12, r22, r32], [r13, r23, r33]];
        lp = mat[0][0] * l + mat[0][1] * m + mat[0][2] * n;
        mp = mat[1][0] * l + mat[1][1] * m + mat[1][2] * n;
        np = mat[2][0] * l + mat[2][1] * m + mat[2][2] * n;
        dec[i][j] = Math.asin(np) * rtod;
        ra[i][j] = Math.atan2(mp, lp) * rtod;
        if (ra[i][j] < 0.0) {
          ra[i][j] += 360.0;
        } else if (ra[i][j] > 360.0) {
          ra[i][j] -= 360;
        }
        u[i][j] = ra[i][j] * (1.0 / 360.0);
        v[i][j] = dec[i][j] * (1.0 / 180.0) + 0.5;
      }
    }
    return [ra, dec];
  };

  return Projection;

})();
