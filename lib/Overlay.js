// Generated by CoffeeScript 1.3.3
var Overlay,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Overlay = (function() {

  Overlay.survey = null;

  Overlay.set = null;

  Overlay.alpha = 1.0;

  Overlay.name = '';

  Overlay.set = false;

  Overlay.Textures = null;

  Overlay.VertexPositionBuffer = null;

  Overlay.VertexIndexBuffer = null;

  Overlay.VertexTextureCoordBuffer = null;

  Overlay.VertexTexturePosBuffer = null;

  Overlay.vertexPositionData = null;

  Overlay.textureCoordData = null;

  Overlay.indexData = null;

  Overlay.texturePos = null;

  Overlay.numTextures = 0;

  Overlay.indexPos = 0;

  function Overlay(SkyView, survey, range, name) {
    this.SkyView = SkyView;
    this.setAlpha = __bind(this.setAlpha, this);

    this.getSet = __bind(this.getSet, this);

    this.setFlag = __bind(this.setFlag, this);

    this.render = __bind(this.render, this);

    this.bindTextures = __bind(this.bindTextures, this);

    this.bindAttributes = __bind(this.bindAttributes, this);

    this.createTile = __bind(this.createTile, this);

    this.createAnnoOverlay = __bind(this.createAnnoOverlay, this);

    this.createSDSSOverlay = __bind(this.createSDSSOverlay, this);

    this.createLSSTOverlay = __bind(this.createLSSTOverlay, this);

    this.createFIRSTOverlay = __bind(this.createFIRSTOverlay, this);

    this.TexturePos = [this.SkyView.gl.TEXTURE0, this.SkyView.gl.TEXTURE1, this.SkyView.gl.TEXTURE2, this.SkyView.gl.TEXTURE3, this.SkyView.gl.TEXTURE4, this.SkyView.gl.TEXTURE5, this.SkyView.gl.TEXTURE6, this.SkyView.gl.TEXTURE7, this.SkyView.gl.TEXTURE8, this.SkyView.gl.TEXTURE9, this.SkyView.gl.TEXTURE10, this.SkyView.gl.TEXTURE11, this.SkyView.gl.TEXTURE12, this.SkyView.gl.TEXTURE13, this.SkyView.gl.TEXTURE14, this.SkyView.gl.TEXTURE15];
    this.survey = survey;
    this.Textures = [];
    if (this.survey === "SDSS") {
      this.createSDSSOverlay();
    } else if (this.survey === "LSST") {
      this.createLSSTOverlay();
    } else if (this.survey === "FIRST") {
      this.createFIRSTOverlay();
    }
    this.alpha = 1.0;
    this.name = name;
    return;
  }

  Overlay.prototype.createFIRSTOverlay = function() {
    var ffile,
      _this = this;
    this.firstarray = [];
    this.firstflag = false;
    ffile = new XMLHttpRequest();
    ffile.open('GET', '../../first2degree/firstimages.txt', true);
    ffile.onload = function(e) {
      var image, index, lines, proj, text, _i, _len, _ref, _results;
      text = ffile.responseText;
      lines = text.split("\n");
      $.each(lines, function(key, val) {
        return _this.firstarray.push(val);
      });
      _ref = _this.firstarray;
      _results = [];
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        image = _ref[index];
        if (!(index < 2)) {
          continue;
        }
        proj = new Projection(_this.SkyView.Math);
        _results.push(proj.init(_this.SkyView.gl, "", "" + image, _this, _this.survey));
      }
      return _results;
    };
    ffile.send();
  };

  Overlay.prototype.createLSSTOverlay = function() {
    var lfile,
      _this = this;
    this.lsstarray = [];
    this.lsstflag = false;
    lfile = new XMLHttpRequest();
    lfile.open('GET', '../../lsstimages/filelist.txt', true);
    lfile.onload = function(e) {
      var image, lines, proj, text, _i, _len, _ref, _results;
      text = lfile.responseText;
      lines = text.split("\n");
      $.each(lines, function(key, val) {
        return _this.lsstarray.push(val);
      });
      _ref = _this.lsstarray;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        image = _ref[_i];
        proj = new Projection(_this.SkyView.Math);
        _results.push(proj.init(_this.SkyView.gl, "", "" + image, _this, _this.survey));
      }
      return _results;
    };
    lfile.send();
  };

  Overlay.prototype.createSDSSOverlay = function() {
    var dec, ra, radius,
      _this = this;
    radius = 15;
    this.vertexPositionData = [];
    this.textureCoordData = [];
    this.indexData = [];
    this.texturePos = [];
    if (radius < 1.0) {
      radius = 1.0;
    }
    ra = -this.SkyView.rotation[1];
    dec = -this.SkyView.rotation[0];
    $.ajaxSetup({
      'async': false
    });
    $.getJSON("./lib/webgl/SDSSFieldQuery.php?ra=" + ra + "&dec=" + dec + "&radius=			" + radius + "&zoom=0", function(data) {
      return $.each(data, function(key, val) {
        var fits, fitsFile, proj;
        if (key % 2 === 0) {
          fitsFile = data[key + 1];
          fits = fitsFile.split(".")[0].concat(".").concat(fitsFile.split(".")[1]);
          proj = new Projection(_this.SkyView.Math);
          return proj.init(_this.SkyView.gl, "http://astro.cs.pitt.edu/sdss2degregion00/" + val, "../../sdss2degregion00/headtext/" + fits, _this, _this.survey);
        }
      });
    });
    $.ajaxSetup({
      'async': true
    });
    this.VertexPositionBuffer = this.SkyView.gl.createBuffer();
    this.SkyView.gl.bindBuffer(this.SkyView.gl.ARRAY_BUFFER, this.VertexPositionBuffer);
    this.SkyView.gl.bufferData(this.SkyView.gl.ARRAY_BUFFER, new Float32Array(this.vertexPositionData), this.SkyView.gl.STATIC_DRAW);
    this.VertexPositionBuffer.itemSize = 3;
    this.VertexPositionBuffer.numItems = this.vertexPositionData.length / 3;
    console.log("size", this.indexData.length);
    this.VertexIndexBuffer = this.SkyView.gl.createBuffer();
    this.SkyView.gl.bindBuffer(this.SkyView.gl.ELEMENT_ARRAY_BUFFER, this.VertexIndexBuffer);
    this.SkyView.gl.bufferData(this.SkyView.gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(this.indexData), this.SkyView.gl.STATIC_DRAW);
    this.VertexIndexBuffer.itemSize = 1;
    this.VertexIndexBuffer.numItems = this.indexData.length;
    this.VertexTextureCoordBuffer = this.SkyView.gl.createBuffer();
    this.SkyView.gl.bindBuffer(this.SkyView.gl.ARRAY_BUFFER, this.VertexTextureCoordBuffer);
    this.SkyView.gl.bufferData(this.SkyView.gl.ARRAY_BUFFER, new Float32Array(this.textureCoordData), this.SkyView.gl.STATIC_DRAW);
    this.VertexTextureCoordBuffer.itemSize = 2;
    this.VertexTextureCoordBuffer.numItems = this.textureCoordData.length / 2;
    this.VertexTexturePos = this.SkyView.gl.createBuffer();
    this.SkyView.gl.bindBuffer(this.SkyView.gl.ARRAY_BUFFER, this.VertexTexturePos);
    this.SkyView.gl.bufferData(this.SkyView.gl.ARRAY_BUFFER, new Uint16Array(this.texturePos), this.SkyView.gl.STATIC_DRAW);
    this.VertexTexturePos.itemSize = 1;
    return this.VertexTexturePos.numItems = this.texturePos.length;
  };

  Overlay.prototype.createAnnoOverlay = function(raDec, raMin, raMax, decMin, decMax, color, label) {
    var img, imgURL, range, scale,
      _this = this;
    scale = ((-this.translation[2] + 1) * 15) * 3600;
    img = '';
    $.ajaxSetup({
      'async': false
    });
    $.ajax({
      type: 'POST',
      url: "./lib/createOverlay.php",
      data: {
        'width': 512,
        'height': 512,
        'RAMin': raMin,
        'RAMax': raMax,
        'DecMin': decMin,
        'DecMax': decMax,
        'scale': 1.8,
        'diam': 2,
        'color': color,
        'table': JSON.stringify(raDec)
      },
      success: function(data) {
        img = data;
      }
    });
    $.ajaxSetup({
      'async': true
    });
    imgURL = "./lib/overlays/" + img;
    range = [raMin, raMax, decMin, decMax];
    this.Texture.push(loadTexture(this.SkyView.gl, texture, null));
    this.createTile([range[1], range[0], range[0], range[1]], [range[3], range[3], range[2], range[2]]);
    this.setFlag();
    return overlay;
  };

  Overlay.prototype.createTile = function(ra, dec) {
    var coord, coords, cosPhi, cosTheta, phi, radius, sinPhi, sinTheta, theta, x, y, z, _i, _len;
    radius = 1;
    /* if ra and dec are specified for the sphere, 
    			use them
    */

    if ((ra != null) && (dec != null)) {
      coords = [[ra[0], dec[0]], [ra[1], dec[1]], [ra[2], dec[2]], [ra[3], dec[3]]];
      for (_i = 0, _len = coords.length; _i < _len; _i++) {
        coord = coords[_i];
        phi = (90 - coord[1]) * Math.PI / 180.0;
        theta = 0;
        if (coord[0] > 270) {
          theta = (270 - coord[0] + 360) * Math.PI / 180.0;
        } else {
          theta = (270 - coord[0]) * Math.PI / 180.0;
        }
        sinTheta = Math.sin(theta);
        cosTheta = Math.cos(theta);
        sinPhi = Math.sin(phi);
        cosPhi = Math.cos(phi);
        z = sinPhi * sinTheta;
        y = cosPhi;
        x = sinPhi * cosTheta;
        this.vertexPositionData.push(radius * x);
        this.vertexPositionData.push(radius * y);
        this.vertexPositionData.push(radius * z);
        this.textureCoordData.push(0.0);
        this.textureCoordData.push(1.0);
        this.textureCoordData.push(0.0);
        this.textureCoordData.push(0.0);
        this.textureCoordData.push(1.0);
        this.textureCoordData.push(0.0);
        this.textureCoordData.push(1.0);
        this.textureCoordData.push(1.0);
      }
      this.indexData.push(this.indexPos + 2);
      this.indexData.push(this.indexPos + 3);
      this.indexData.push(this.indexPos);
      this.indexData.push(this.indePos + 1);
      this.indexData.push(this.indexPos + 2);
      this.indexData.push(this.indexPos);
      this.texturePos.push(this.numTextures % 16);
      this.indexPos += 4;
      this.numTextures++;
    }
  };

  Overlay.prototype.bindAttributes = function(shaderProgram) {
    this.SkyView.gl.bindBuffer(this.SkyView.gl.ARRAY_BUFFER, this.VertexPositionBuffer);
    this.SkyView.gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, this.VertexPositionBuffer.itemSize, this.SkyView.gl.FLOAT, false, 0, 0);
    this.SkyView.gl.bindBuffer(this.SkyView.gl.ARRAY_BUFFER, this.VertexTextureCoordBuffer);
    this.SkyView.gl.vertexAttribPointer(shaderProgram.textureCoordAttribute, this.VertexTextureCoordBuffer.itemSize, this.SkyView.gl.FLOAT, false, 0, 0);
    this.SkyView.gl.bindBuffer(this.SkyView.gl.ARRAY_BUFFER, this.VertexTexturePos);
    this.SkyView.gl.vertexAttribPointer(shaderProgram.texturePosAttribute, this.VertexTexturePos.itemSize, this.SkyView.gl.FLOAT, false, 0, 0);
    this.SkyView.gl.bindBuffer(this.SkyView.gl.ELEMENT_ARRAY_BUFFER, this.VertexIndexBuffer);
  };

  Overlay.prototype.bindTextures = function(shaderProgram, numTextures, offset) {
    var i, iterator, _i, _ref;
    iterator = Math.min(this.numTextures, numTextures);
    for (i = _i = 0, _ref = iterator - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      this.SkyView.gl.activeTexture(this.TexturePos[i]);
      this.SkyView.gl.bindTexture(this.SkyView.gl.TEXTURE_2D, this.Texture[i + offset]);
      this.SkyView.gl.uniform1i(shaderProgram.sampler[i], i);
    }
  };

  Overlay.prototype.render = function(renderMode) {
    return this.SkyView.gl.drawElements(renderMode, this.VertexIndexBuffer.numItems, this.SkyView.gl.UNSIGNED_SHORT, 0);
  };

  Overlay.prototype.setFlag = function() {
    this.set = true;
  };

  Overlay.prototype.getSet = function() {
    return this.set;
  };

  Overlay.prototype.setAlpha = function(value) {
    this.alpha = value;
    this.SkyView.render();
  };

  return Overlay;

})();
