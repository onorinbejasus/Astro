// Generated by CoffeeScript 1.3.2
var ImageProxy, Overlay,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ImageProxy = (function() {

  function ImageProxy(imgURL, placeholder) {
    var _this = this;
    this.currentImage = placeholder;
    this.realImage = new Image();
    this.realImage.onload = function() {
      return _this.currentImage = _this.realImage;
    };
    this.realImage.src = imgURL;
  }

  ImageProxy.prototype.display = function() {
    return this.currentImage;
  };

  return ImageProxy;

})();

Overlay = (function() {

  function Overlay(options) {
    this.setPlaceholder = __bind(this.setPlaceholder, this);

    this.setAlpha = __bind(this.setAlpha, this);

    this.deleteOverlay = __bind(this.deleteOverlay, this);

    this.requestAnno = __bind(this.requestAnno, this);

    this.requestFIRST = __bind(this.requestFIRST, this);

    this.requestSDSS = __bind(this.requestSDSS, this);

    this.display = __bind(this.display, this);

    this.request = __bind(this.request, this);
    this.buffer = {};
    this.placeholder = options.placeholder;
    this.debug = options.type != null ? options.type : false;
    this.type = options.type != null ? options.type : "SDSS";
    this.view = options.view != null ? options.view : null;
    this.alpha = options.alpha != null ? options.alpha : 1.0;
    this.imagePath = '';
    if (this.type === "SDSS") {
      this.requestImage = this.requestSDSS;
    } else if (this.type === "FIRST") {
      this.requestImage = this.requestFIRST;
      this.imagePath = options.imagepath != null ? options.imagepath : '';
    } else if (this.type === "ANNO") {
      this.requestImage = this.requestAnno;
      this.imagePath = options.imagepath != null ? options.imagepath : '';
      this.time = options.time != null ? options.time : 0.0;
      this.query = options.query != null ? options.query : null;
      this.color = options.color != null ? options.color : null;
      this.source = options.source != null ? options.source : null;
    } else if (this.type === "custom") {
      this.requestImage = options.imageRequest;
    }
    if (this.view) {
      this.view.attach(this);
    }
  }

  Overlay.prototype.update = function(type, info) {
    switch (type) {
      case "display":
        return this.display(info);
      case "request":
        return this.request(info);
      case "static":
        break;
      default:
        break;
    }
  };

  Overlay.prototype.request = function(req) {
    var cb,
      _this = this;
    if ((this.buffer[req.x] != null) && (this.buffer[req.x][req.y] != null)) {

    } else {
      cb = function(imgURL) {
        var imgProxy;
        imgProxy = new ImageProxy(imgURL, _this.placeholder);
        if ((_this.buffer[req.x] != null)) {
          return _this.buffer[req.x][req.y] = imgProxy;
        } else {
          _this.buffer[req.x] = {};
          return _this.buffer[req.x][req.y] = imgProxy;
        }
      };
      return this.requestImage(req.RA, -req.Dec, this.scale, cb);
    }
  };

  Overlay.prototype.display = function(info) {
    if (this.buffer[info.x] && this.buffer[info.x][info.y]) {
      info.ctx.save();
      info.ctx.globalAlpha = this.alpha;
      info.ctx.translate(-info.x * 1024, -info.y * 1024);
      if (this.buffer[info.x][info.y].display()) {
        info.ctx.drawImage(this.buffer[info.x][info.y].display(), 0, 0);
      }
      return info.ctx.restore();
    }
  };

  Overlay.prototype.requestSDSS = function(degX, degY, scale, cb) {
    var decMax, decMin, imgURL, newurl, raMax, raMin;
    console.log(degX, degY);
    decMin = degY - .256;
    decMax = degY + .256;
    raMax = degX + .256;
    raMin = degX - .256;
    newurl = "./lib/db/remote/SDSS.php?scale=" + 1.8 + "&ra=" + degX + "&dec=" + degY + "&width=1024&height=1024&opt=";
    if (this.debug) {
      newurl = "SDSS.jpg";
    }
    imgURL = newurl;
    cb(imgURL);
    return this.view.display();
  };

  Overlay.prototype.requestFIRST = function(degX, degY, scale, cb) {
    var decMax, decMin, done, raMax, raMin, url,
      _this = this;
    decMin = degY - .256;
    decMax = degY + .256;
    raMax = degX + .256;
    raMin = degX - .256;
    url = './lib/db/remote/SPATIALTREE.php';
    done = function(data) {
      var imgURL;
      imgURL = "";
      if (data[0]) {
        imgURL = _this.imagePath + data[0];
      } else {
        imgURL = _this.placeholder;
      }
      return cb(imgURL);
    };
    return $.get(url, {
      RAMin: raMin,
      RAMax: raMax,
      DecMin: decMin,
      DecMax: decMax
    }, done, 'json');
  };

  Overlay.prototype.requestAnno = function(degX, degY, scale, cb) {
    var decMax, decMin, imgURL, raMax, raMin;
    console.log(degX, degY);
    decMin = degY - .256;
    decMax = degY + .256;
    raMax = degX + .256;
    raMin = degX - .256;
    imgURL = "./lib/createOverlay.php?width=1024&height=1024			&RAMin=" + raMin + "&RAMax=" + raMax + "&DecMin=" + decMin + "&DecMax=" + decMax + "&scale=1.8&diam=2			&ms=" + this.time + "&query=" + this.query + "&type=" + this.source + "&color=" + this.color;
    cb(imgURL);
    return this.view.display();
  };

  Overlay.prototype.deleteOverlay = function() {
    return this.view.detach(this);
  };

  Overlay.prototype.setAlpha = function(newAlpha) {
    return this.alpha = newAlpha;
  };

  Overlay.prototype.setPlaceholder = function(newPlaceholder) {
    return this.placeholder = newPlaceholder;
  };

  return Overlay;

})();
