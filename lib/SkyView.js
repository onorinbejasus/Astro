// Generated by CoffeeScript 1.3.2
var SkyView,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SkyView = (function(_super) {

  __extends(SkyView, _super);

  SkyView.gridBlocks = 0;

  SkyView.rotation = null;

  SkyView.translation = null;

  SkyView.renderMode = 0;

  SkyView.Math = null;

  SkyView.it = 0;

  SkyView.selected = "none";

  SkyView.SDSSalpha = null;

  SkyView.Annoalpha = null;

  function SkyView(options) {
    this.getCoordinate = __bind(this.getCoordinate, this);

    this.getBoundingBox = __bind(this.getBoundingBox, this);

    this.keyPressed = __bind(this.keyPressed, this);

    this.render = __bind(this.render, this);

    this.jump = __bind(this.jump, this);

    this.panScroll = __bind(this.panScroll, this);

    this.panUp = __bind(this.panUp, this);

    this.panMove = __bind(this.panMove, this);

    this.panDown = __bind(this.panDown, this);

    this.createOverlay = __bind(this.createOverlay, this);

    this.setScale = __bind(this.setScale, this);

    this.setSDSSAlpha = __bind(this.setSDSSAlpha, this);
    SkyView.__super__.constructor.call(this, options);
    this.translation = [0.0, 0.0, 0.99333];
    this.rotation = [0.0, 0.0, 0.0];
    this.renderMode = this.gl.TRIANGLES;
    this.SDSSalpha = 1.0;
    this.Annoalpha = [];
    this.Math = new math();
    this.gridBlocks = [];
    $('#RA-Dec').text((-this.rotation[1]).toFixed(8) + ", " + (-this.rotation[0]).toFixed(8));
    $('#Scale').text(((-this.translation[2] + 1) * 15).toFixed(2));
    this.render(true);
  }

  SkyView.prototype.setSDSSAlpha = function(value) {
    this.SDSSalpha = value;
    return this.render();
  };

  SkyView.prototype.setScale = function(value) {
    $('#Scale').text(((value + 1) * 15).toFixed(2));
  };

  SkyView.prototype.createOverlay = function(raDec, raMin, raMax, decMin, decMax, color, label) {
    var img, imgURL, overlay, range, scale,
      _this = this;
    scale = ((-this.translation[2] + 1) * 15) * 3600;
    range = [raMin, raMax, decMin, decMax];
    img = '';
    $.ajaxSetup({
      'async': false
    });
    $.ajax({
      type: 'POST',
      url: "./lib/createOverlay.php",
      data: {
        'width': 1024,
        'height': 1024,
        'RAMin': raMin,
        'RAMax': raMax,
        'DecMin': decMin,
        'DecMax': decMax,
        'scale': 1.8,
        'diam': 2,
        'color': color,
        'table': JSON.stringify(raDec)
      },
      success: function(data) {
        img = data;
      }
    });
    $.ajaxSetup({
      'async': true
    });
    console.log(img);
    imgURL = "./lib/overlays/" + img;
    /*
    		imgURL = "./lib/createOverlay.php?width=1024&height=1024
    			&RAMin=#{raMin}&RAMax=#{raMax}&DecMin=#{decMin}&DecMax=#{decMax}&scale=1.8&diam=4
    				&color=#{color}&table="+JSON.stringify(raDec)
    */

    overlay = new HTM(this.gl, this.Math, "anno", "anno", imgURL, null, range);
    this.gridBlocks.push(overlay);
    return overlay;
  };

  SkyView.prototype.panDown = function(event) {
    this.mouseState = this.MOUSE_DOWN;
    this.mouse_coords.x = event.clientX;
    return this.mouse_coords.y = event.clientY;
  };

  SkyView.prototype.panMove = function(event) {
    var delta_x, delta_y;
    if (this.mouseState === this.MOUSE_DOWN) {
      delta_x = event.clientX - this.mouse_coords.x;
      delta_y = event.clientY - this.mouse_coords.y;
      this.mouse_coords.x = event.clientX;
      this.mouse_coords.y = event.clientY;
      if (delta_y <= 0) {
        this.rotation[0] -= Config.pan_sensitivity;
      } else {
        this.rotation[0] += Config.pan_sensitivity;
      }
      if (delta_x <= 0) {
        this.rotation[1] -= Config.pan_sensitivity;
      } else {
        this.rotation[1] += Config.pan_sensitivity;
      }
      $('#RA-Dec').text((-this.rotation[1]).toFixed(8) + ", " + (-this.rotation[0]).toFixed(8));
      return this.render(true);
    }
  };

  SkyView.prototype.panUp = function(event) {
    return this.mouseState = 0;
  };

  SkyView.prototype.panScroll = function(event) {
    var delta;
    delta = 0;
    if (!event) {
      event = window.event;
    }
    if (event.wheelDelta) {
      delta = event.wheelDelta / 60;
    } else if (event.detail) {
      delta = -event.detail / 2;
    }
    if (delta > 0) {
      this.translation[2] -= Config.scroll_sensitivity;
    } else {
      this.translation[2] += Config.scroll_sensitivity;
    }
    $('#Scale').text(((-this.translation[2] + 1) * 15).toFixed(2));
    return this.render();
  };

  SkyView.prototype.jump = function(RA, Dec) {
    this.rotation[1] = -RA;
    return this.rotation[0] = -Dec;
  };

  SkyView.prototype.render = function(flag) {
    var dec, grid, ra, radius, _i, _len, _ref,
      _this = this;
    if ((flag != null) && flag === true) {
      radius = 45;
      if (radius < 1.0) {
        radius = 1.0;
      }
      ra = -this.rotation[1];
      dec = -this.rotation[0];
      $.ajaxSetup({
        'async': false
      });
      $.getJSON("./lib/webgl/SDSSFieldQuery.php?ra=" + ra + "&dec=" + dec + "&radius=				" + radius + "&zoom=0", function(data) {
        return $.each(data, function(key, val) {
          var fits, fitsFile;
          if (key % 2 === 0) {
            fitsFile = data[key + 1];
            fits = fitsFile.split(".")[0].concat(".").concat(fitsFile.split(".")[1]);
            return _this.gridBlocks.push(new HTM(_this.gl, _this.Math, "sky", "SDSS", "./lib/webgl/sdss/" + val, "/afs/cs.pitt.edu/usr0/tbl8/public/html/timProduction/lib/webgl/sdss/headtext/" + fits));
          }
        });
      });
      $.ajaxSetup({
        'async': true
      });
      /*
      			url = './lib/db/remote/SPATIALTREE.php'
      			done = (data)=>
      				imgURL = ""
      				if(data[0])
      					imgURL = (@imagePath + data[0])
      					console.log data[0]
      				else
      					$.get url,{RAMin:raMin, RAMax:raMax, DecMin:decMin, DecMax:decMax}, done, 'json'
      */

    }
    this.preRender(this.rotation, this.translation);
    _ref = this.gridBlocks;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      grid = _ref[_i];
      if (grid.getSet() === true) {
        grid.bindSphere(this.shaderProgram);
        if (grid.survey === "SDSS") {
          this.gl.uniform1f(this.shaderProgram.alphaUniform, this.SDSSalpha);
        } else if (grid.survey === "anno") {
          this.gl.disable(this.gl.DEPTH_TEST);
          this.gl.enable(this.gl.BLEND);
          this.gl.blendFunc(this.gl.SRC_ALPHA, this.gl.ONE);
          this.gl.uniform1f(this.shaderProgram.alphaUniform, this.Annoalpha[0]);
        }
        grid.renderSphere(this.renderMode);
      }
    }
  };

  SkyView.prototype.mouseHandler = function(canvas) {
    this.hookEvent(canvas, "mousedown", this.panDown);
    this.hookEvent(canvas, "mouseup", this.panUp);
    this.hookEvent(canvas, "mousewheel", this.panScroll);
    return this.hookEvent(canvas, "mousemove", this.panMove);
  };

  SkyView.prototype.hookEvent = function(element, eventName, callback) {
    if (typeof element === "string") {
      element = document.getElementById(element);
    }
    if (element === null) {
      return;
    }
    if (element.addEventListener) {
      if (eventName === 'mousewheel') {
        element.addEventListener('DOMMouseScroll', callback, false);
      }
      return element.addEventListener(eventName, callback, false);
    } else if (element.attachEvent) {
      return element.attachEvent("on" + eventName, callback);
    }
  };

  SkyView.prototype.unhookEvent = function(element, eventName, callback) {
    if (typeof element === "string") {
      element = document.getElementById(element);
    }
    if (element === null) {
      return;
    }
    if (element.removeEventListener) {
      if (eventName === 'mousewheel') {
        element.removeEventListener('DOMMouseScroll', callback, false);
      }
      element.removeEventListener(eventName, callback, false);
    } else if (element.detachEvent) {
      element.detachEvent("on" + eventName, callback);
    }
  };

  SkyView.prototype.keyPressed = function(key) {
    switch (String.fromCharCode(key.which)) {
      case 'i':
        this.rotation[0] -= 0.1;
        $('#RA-Dec').text((-this.rotation[1]).toFixed(8) + ", " + (-this.rotation[0]).toFixed(8));
        this.render();
        break;
      case 'k':
        this.rotation[0] += 0.1;
        $('#RA-Dec').text((-this.rotation[1]).toFixed(8) + ", " + (-this.rotation[0]).toFixed(8));
        this.render();
        break;
      case 'l':
        this.rotation[1] += 0.1;
        $('#RA-Dec').text((-this.rotation[1]).toFixed(8) + ", " + (-this.rotation[0]).toFixed(8));
        if (-this.rotation[1] < 0) {
          $('#RA-Dec').text((360 - this.rotation[1]).toFixed(8) + ", " + (-this.rotation[0]).toFixed(8));
        } else if (-this.rotation[1] > 360) {
          $('#RA-Dec').text((this.rotation[1] + 360).toFixed(8) + ", " + (-this.rotation[0]).toFixed(8));
        }
        this.render();
        break;
      case 'j':
        this.rotation[1] -= 0.1;
        $('#RA-Dec').text((-this.rotation[1]).toFixed(8) + ", " + (-this.rotation[0]).toFixed(8));
        if (-this.rotation[1] > 360) {
          $('#RA-Dec').text((this.rotation[1] + 360).toFixed(8) + ", " + (-this.rotation[0]).toFixed(8));
        } else if (-this.rotation[1] < 0) {
          $('#RA-Dec').text((360 - this.rotation[1]).toFixed(8) + ", " + (-this.rotation[0]).toFixed(8));
        }
        this.render();
        break;
      case 'w':
        this.translation[2] += 0.001;
        $('#Scale').text(((-this.translation[2] + 1) * 15).toFixed(2));
        this.render();
        break;
      case 's':
        this.translation[2] -= 0.001;
        $('#Scale').text(((-this.translation[2] + 1) * 15).toFixed(2));
        this.render();
        break;
      case 'W':
        this.translation[2] += 0.01;
        $('#Scale').text(((-this.translation[2] + 1) * 15).toFixed(2));
        this.render();
        break;
      case 'S':
        this.translation[2] -= 0.01;
        $('#Scale').text(((-this.translation[2] + 1) * 15).toFixed(2));
        this.render();
        break;
      case 't':
        this.getBoundingBox();
    }
  };

  SkyView.prototype.getBoundingBox = function() {
    var max, min, range;
    max = this.getCoordinate(this.canvas.width, this.canvas.height);
    min = this.getCoordinate(0, 0);
    range = new Object();
    range.maxRA = max.x;
    range.minRA = min.x;
    range.maxDec = max.y;
    range.minDec = min.y;
    return range;
  };

  SkyView.prototype.getCoordinate = function(x, y) {
    var Dec, RA, a, b, c, descrim, dir, far, intersection, inverse, matrices, near, origin, phi, raDec, success, t, theta;
    matrices = this.getMatrices();
    near = [];
    far = [];
    success = GLU.unProject(x, this.gl.viewportHeight - y, 0.0, matrices[0], matrices[1], matrices[2], near);
    success = GLU.unProject(x, this.gl.viewportHeight - y, 1.0, matrices[0], matrices[1], matrices[2], far);
    dir = this.Math.subtract(far, near);
    origin = [0.0, 0.0, 0.0, 1.0];
    inverse = mat4.set(matrices[0], mat4.create());
    inverse = mat4.inverse(inverse);
    origin = this.Math.multiply(origin, inverse);
    dir = this.Math.norm(dir);
    a = this.Math.dot([dir[0], dir[1], dir[2], 1.0], [dir[0], dir[1], dir[2], 1.0]);
    b = this.Math.dot([origin[0], origin[1], origin[2], 0.0], [dir[0], dir[1], dir[2], 1.0]) * 2.0;
    c = this.Math.dot([origin[0], origin[1], origin[2], 0.0], [origin[0], origin[1], origin[2], 0.0]) - 1;
    t = [0, 0];
    descrim = Math.pow(b, 2) - (4.0 * a * c);
    if (descrim >= 0) {
      t[0] = (-b - Math.sqrt(descrim)) / (2.0 * a);
      t[1] = (-b + Math.sqrt(descrim)) / (2.0 * a);
    }
    intersection = this.Math.add(origin, this.Math.mult(dir, t[1]));
    theta = Math.atan(intersection[0] / intersection[2]) * 57.29577951308323;
    RA = theta;
    /*
    		if theta < 270
    			RA = 270 - RA
    		else
    			theta = 360 + (RA-270)
    */

    phi = Math.acos(intersection[1]) * 57.29577951308323;
    Dec = 90 - phi;
    raDec = new Object();
    raDec.x = RA;
    raDec.y = Dec;
    return raDec;
  };

  return SkyView;

})(WebGL);
