// Generated by CoffeeScript 1.3.2
var SkyView,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SkyView = (function(_super) {

  __extends(SkyView, _super);

  SkyView.gridBlocks = 0;

  SkyView.rotation = null;

  SkyView.translation = null;

  SkyView.renderMode = 0;

  SkyView.Math = null;

  SkyView.it = 0;

  SkyView.selected = "none";

  function SkyView(options) {
    this.mousePress = __bind(this.mousePress, this);

    this.keyPressed = __bind(this.keyPressed, this);

    this.render = __bind(this.render, this);

    this.jump = __bind(this.jump, this);

    this.setScale = __bind(this.setScale, this);
    SkyView.__super__.constructor.call(this, options);
    this.translation = [0.0, 0.0, 0.3333];
    this.rotation = [-52.0, -176.0, 0.0];
    this.renderMode = this.gl.TRIANGLES;
    this.level = 0;
    this.Math = new math();
    this.gridBlocks = [];
    $('#RA-Dec').text((-this.rotation[1]).toFixed(8) + ", " + (-this.rotation[0]).toFixed(8));
    this.render(true);
    return;
  }

  SkyView.prototype.setScale = function() {
    return this.translation[2] = 1 - (document.getElementById("scale").value / 45.0);
  };

  SkyView.prototype.jump = function(RA, Dec) {
    this.rotation[1] = -RA;
    return this.rotation[0] = -Dec;
  };

  SkyView.prototype.render = function(flag) {
    var dec, grid, ra, radius, _i, _len, _ref,
      _this = this;
    if ((flag != null) && flag === true) {
      radius = 30;
      if (radius < 1.0) {
        radius = 1.0;
      }
      ra = -this.rotation[1];
      dec = -this.rotation[0];
      $.ajaxSetup({
        'async': false
      });
      $.getJSON("./SDSSFieldQuery.php?ra=" + ra + "&dec=" + dec + "&radius=				" + radius + "&zoom=0", function(data) {
        return $.each(data, function(key, val) {
          console.log(val);
          return _this.gridBlocks.push(new HTM(_this.level, _this.gl, _this.Math, "sky", "./sdss/" + val));
        });
      });
      $.ajaxSetup({
        'async': true
      });
    }
    this.preRender(this.rotation, this.translation);
    _ref = this.gridBlocks;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      grid = _ref[_i];
      if (grid.getSet() === true) {
        console.log("render");
        grid.bindSphere(this.shaderProgram);
        grid.renderSphere(this.renderMode);
      }
    }
  };

  SkyView.prototype.keyPressed = function(key) {
    switch (String.fromCharCode(key.which)) {
      case 'i':
        this.rotation[0] -= 0.1;
        $('#RA-Dec').text((-this.rotation[1]).toFixed(8) + ", " + (-this.rotation[0]).toFixed(8));
        this.render();
        break;
      case 'k':
        this.rotation[0] += 0.1;
        $('#RA-Dec').text((-this.rotation[1]).toFixed(8) + ", " + (-this.rotation[0]).toFixed(8));
        this.render();
        break;
      case 'l':
        this.rotation[1] += 0.1;
        $('#RA-Dec').text((-this.rotation[1]).toFixed(8) + ", " + (-this.rotation[0]).toFixed(8));
        if (-this.rotation[1] < 0) {
          $('#RA-Dec').text((360 - this.rotation[1]).toFixed(8) + ", " + (-this.rotation[0]).toFixed(8));
        } else if (-this.rotation[1] > 360) {
          $('#RA-Dec').text((this.rotation[1] - 360).toFixed(8) + ", " + (-this.rotation[0]).toFixed(8));
        }
        this.render();
        break;
      case 'j':
        this.rotation[1] -= 0.1;
        $('#RA-Dec').text(this.rotation[1].toFixed(8) + ", " + (-this.rotation[0]).toFixed(8));
        if (-this.rotation[1] > 360) {
          $('#RA-Dec').text((this.rotation[1] - 360).toFixed(8) + ", " + (-this.rotation[0]).toFixed(8));
        } else if (this.rotation[1] < 0) {
          $('#RA-Dec').text((360 - this.rotation[1]).toFixed(8) + ", " + (-this.rotation[0]).toFixed(8));
        }
        this.render();
        break;
      case 'w':
        this.translation[2] += 0.001;
        this.render(false);
        break;
      case 's':
        this.translation[2] -= 0.001;
        this.render();
        break;
      case 'W':
        this.translation[2] += 0.01;
        this.render(false);
        break;
      case 'S':
        this.translation[2] -= 0.01;
        this.render();
    }
  };

  SkyView.prototype.mousePress = function(key) {
    var dir, far, inverse, matrices, names, near, origin, success, tri;
    if (key.x > 500 || key.y > 500) {
      return;
    }
    matrices = this.getMatrices();
    near = [];
    far = [];
    success = GLU.unProject(key.x, this.gl.viewportHeight - key.y, 0.0, matrices[0], matrices[1], matrices[2], near);
    success = GLU.unProject(key.x, this.gl.viewportHeight - key.y, 1.0, matrices[0], matrices[1], matrices[2], far);
    dir = this.Math.subtract(far, near);
    origin = [0.0, 0.0, 0.0, 1.0];
    inverse = mat4.set(matrices[0], mat4.create());
    inverse = mat4.inverse(inverse);
    origin = this.Math.multiply(origin, inverse);
    dir = this.Math.norm(dir);
    tri = this.HTM.getTriangles();
    names = this.HTM.getNames();
    /*		
    		it = -1
    		for triangle in tri
    			it = it + 1
    			if @Math.intersectTri(origin, dir, triangle)
    				console.log names[it]
    				@selected = names[it]
    				this.render()
    				this.colorClick(triangle)
    				break
    */

  };

  return SkyView;

})(WebGL);
