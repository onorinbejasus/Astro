// Generated by CoffeeScript 1.3.2
var BoxOverlay, SkyView,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SkyView = (function(_super) {

  __extends(SkyView, _super);

  SkyView.prototype.gridBlocks = 0;

  SkyView.prototype.rotation = null;

  SkyView.prototype.translation = null;

  SkyView.prototype.renderMode = 0;

  SkyView.prototype.refresh_timeout = 0;

  SkyView.prototype.Math = null;

  function SkyView(options) {
    this.keyPressed = __bind(this.keyPressed, this);

    this.getCoordinate = __bind(this.getCoordinate, this);

    this.getPosition = __bind(this.getPosition, this);

    this.getBoundingBox = __bind(this.getBoundingBox, this);

    this.notify = __bind(this.notify, this);

    this.register = __bind(this.register, this);

    this.sky_view_mouse_down = __bind(this.sky_view_mouse_down, this);

    this.sky_view_mouse_up = __bind(this.sky_view_mouse_up, this);

    this.sky_view_mouse_move = __bind(this.sky_view_mouse_move, this);

    this.jump = __bind(this.jump, this);

    this.panScroll = __bind(this.panScroll, this);

    this.panUp = __bind(this.panUp, this);

    this.panMove = __bind(this.panMove, this);

    this.panDown = __bind(this.panDown, this);

    this.render = __bind(this.render, this);

    this.deleteOverlay = __bind(this.deleteOverlay, this);

    this.addOverlay = __bind(this.addOverlay, this);

    this.setScale = __bind(this.setScale, this);

    this.refresh = __bind(this.refresh, this);
    this.empty = function() {};
    this.box_canvas = document.createElement("canvas");
    this.box_canvas.width = options.clientWidth;
    this.box_canvas.height = options.clientHeight;
    this.box_canvas.style.backgroundColor = "";
    this.box_canvas.style.position = "absolute";
    options.appendChild(this.box_canvas);
    this.event_attach = options;
    this.mouse_down = this.sky_view_mouse_down;
    this.mouse_up = this.sky_view_mouse_up;
    this.mouse_move = this.sky_view_mouse_move;
    this._inner_mouse_move = this.empty;
    this._inner_mouse_up = this.panUp;
    this._inner_mouse_down = this.panDown;
    SkyView.__super__.constructor.call(this, options);
    this.mouse_coords = {
      'x': 0,
      'y': 0
    };
    this.handlers = {
      'translate': this.empty,
      'scale': this.empty,
      'box': this.empty
    };
    this.translation = [0.0, 0.0, 0.99333];
    this.rotation = [0.0, -0.4, 0.0];
    this.renderMode = this.gl.TRIANGLES;
    this.Math = new math();
    this.overlays = [];
    this.box = new BoxOverlay(this.box_canvas, this);
    $('#RA-Dec').text((-this.rotation[1]).toFixed(8) + ", " + (-this.rotation[0]).toFixed(8));
    $('#Scale').text(((-this.translation[2] + 1) * 15).toFixed(2));
    this.render();
    return;
  }

  SkyView.prototype.refresh = function() {
    var overlay, _i, _len;
    for (_i = 0, _len = overlays.length; _i < _len; _i++) {
      overlay = overlays[_i];
      overlay.refresh();
    }
    return this.refresh_timeout = setTimeout(this.refresh, 500);
  };

  SkyView.prototype.setScale = function(value) {
    $('#Scale').text(value.toFixed(2));
    this.translation[2] = (-value / 15.0) + 1.0;
    this.notify('scale', value);
    this.render();
  };

  SkyView.prototype.addOverlay = function(overlay) {
    this.overlays.push(overlay);
  };

  SkyView.prototype.deleteOverlay = function(name) {};

  SkyView.prototype.render = function() {
    var overlay, tile, _i, _j, _len, _len1, _ref, _ref1;
    this.preRender(this.rotation, this.translation);
    _ref = this.overlays;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      overlay = _ref[_i];
      _ref1 = overlay.tiles;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        tile = _ref1[_j];
        if (tile.getSet()) {
          tile.bind(this.shaderProgram);
          if (overlay.survey === "SDSS") {
            this.gl.enable(this.gl.DEPTH_TEST);
            this.gl.disable(this.gl.BLEND);
          } else {
            this.gl.disable(this.gl.DEPTH_TEST);
            this.gl.enable(this.gl.BLEND);
            this.gl.blendFunc(this.gl.SRC_ALPHA, this.gl.ONE);
          }
          this.gl.uniform1f(this.shaderProgram.alphaUniform, overlay.alpha);
          tile.render(this.renderMode);
        }
      }
    }
  };

  SkyView.prototype.panDown = function(event) {
    this._inner_mouse_move = this.panMove;
    this.mouse_coords.x = event.clientX;
    this.mouse_coords.y = event.clientY;
    return this.refresh();
  };

  SkyView.prototype.panMove = function(event) {
    var delta_x, delta_y;
    delta_x = event.clientX - this.mouse_coords.x;
    delta_y = event.clientY - this.mouse_coords.y;
    this.mouse_coords.x = event.clientX;
    this.mouse_coords.y = event.clientY;
    if (delta_y > 0) {
      this.rotation[0] -= delta_y * Config.PAN_SENSITIVITY;
    } else if (delta_y < 0) {
      this.rotation[0] += -delta_y * Config.PAN_SENSITIVITY;
    }
    if (delta_x > 0) {
      this.rotation[1] -= delta_x * Config.PAN_SENSITIVITY;
    } else if (delta_y < 0) {
      this.rotation[1] += -delta_x * Config.PAN_SENSITIVITY;
    }
    $('#RA-Dec').text((-this.rotation[1]).toFixed(8) + ", " + (-this.rotation[0]).toFixed(8));
    return this.render();
  };

  SkyView.prototype.panUp = function(event) {
    clearTimeout(this.refresh_timeout);
    return this._inner_mouse_move = this.empty;
  };

  SkyView.prototype.panScroll = function(event) {
    var delta;
    delta = 0;
    if (!event) {
      event = window.event;
    }
    if (event.wheelDelta) {
      delta = event.wheelDelta / 60;
    } else if (event.detail) {
      delta = -event.detail / 2;
    }
    if (delta > 0) {
      this.translation[2] -= Config.SCROLL_SENSITIVITY;
    } else {
      this.translation[2] += Config.SCROLL_SENSITIVITY;
    }
    $('#Scale').text(((-this.translation[2] + 1) * 15).toFixed(2));
    return this.render();
  };

  SkyView.prototype.jump = function(RA, Dec) {
    this.rotation[1] = -RA;
    this.rotation[0] = -Dec;
    $('#RA-Dec').text((-this.rotation[1]).toFixed(8) + ", " + (-this.rotation[0]).toFixed(8));
    $('#Scale').text(((-this.translation[2] + 1) * 15).toFixed(2));
    return this.render();
  };

  SkyView.prototype.mouseHandler = function() {
    this.hookEvent(this.event_attach, "mousedown", this.sky_view_mouse_down);
    this.hookEvent(this.event_attach, "mouseup", this.sky_view_mouse_up);
    this.hookEvent(this.event_attach, "mousewheel", this.panScroll);
    return this.hookEvent(this.event_attach, "mousemove", this.sky_view_mouse_move);
  };

  SkyView.prototype.hookEvent = function(element, eventName, callback) {
    if (typeof element === "string") {
      element = document.getElementById(element);
    }
    if (element === null) {
      return;
    }
    if (element.addEventListener) {
      if (eventName === 'mousewheel') {
        element.addEventListener('DOMMouseScroll', callback, false);
      }
      return element.addEventListener(eventName, callback, false);
    } else if (element.attachEvent) {
      return element.attachEvent("on" + eventName, callback);
    }
  };

  SkyView.prototype.unhookEvent = function(element, eventName, callback) {
    if (typeof element === "string") {
      element = document.getElementById(element);
    }
    if (element === null) {
      return;
    }
    if (element.removeEventListener) {
      if (eventName === 'mousewheel') {
        element.removeEventListener('DOMMouseScroll', callback, false);
      }
      element.removeEventListener(eventName, callback, false);
    } else if (element.detachEvent) {
      element.detachEvent("on" + eventName, callback);
    }
  };

  SkyView.prototype.sky_view_mouse_move = function(event) {
    return this._inner_mouse_move(event);
  };

  SkyView.prototype.sky_view_mouse_up = function(event) {
    return this._inner_mouse_up(event);
  };

  SkyView.prototype.sky_view_mouse_down = function(event) {
    return this._inner_mouse_down(event);
  };

  SkyView.prototype.register = function(type, callback) {
    var oldLoaded;
    oldLoaded = this.handlers[type];
    if (this.handlers[type]) {
      return this.handlers[type] = function(view) {
        if (oldLoaded) {
          oldLoaded(view);
        }
        return callback(view);
      };
    } else {
      return this.handlers[type] = callback;
    }
  };

  SkyView.prototype.notify = function(type, info) {
    if (this.handlers[type]) {
      return this.handlers[type](info);
    }
  };

  SkyView.prototype.getBoundingBox = function() {
    var max, min, range;
    max = this.getCoordinate(this.canvas.width, this.canvas.height);
    min = this.getCoordinate(0, 0);
    range = new Object();
    range.maxRA = max.x;
    range.minRA = min.x;
    range.maxDec = max.y;
    range.minDec = min.y;
    return range;
  };

  SkyView.prototype.getPosition = function() {
    var pos;
    pos = new Object;
    pos.ra = -this.rotation[1];
    pos.dec = -this.rotation[0];
    return pos;
  };

  SkyView.prototype.getCoordinate = function(x, y) {
    var Dec, RA, a, b, c, descrim, dir, far, intersection, inverse, matrices, near, origin, phi, raDec, success, t, theta;
    matrices = this.getMatrices();
    near = [];
    far = [];
    dir = [];
    success = GLU.unProject(x, this.gl.viewportHeight - y, 0.0, matrices[0], matrices[1], matrices[2], near);
    success = GLU.unProject(x, this.gl.viewportHeight - y, 1.0, matrices[0], matrices[1], matrices[2], far);
    dir = this.Math.subtract(far, near);
    origin = [0.0, 0.0, 0.0, 1.0];
    inverse = mat4.set(matrices[0], mat4.create());
    inverse = mat4.inverse(inverse);
    origin = this.Math.multiply(origin, inverse);
    dir = this.Math.norm(dir);
    a = this.Math.dot([dir[0], dir[1], dir[2], 1.0], [dir[0], dir[1], dir[2], 1.0]);
    b = this.Math.dot([origin[0], origin[1], origin[2], 0.0], [dir[0], dir[1], dir[2], 1.0]) * 2.0;
    c = this.Math.dot([origin[0], origin[1], origin[2], 0.0], [origin[0], origin[1], origin[2], 0.0]) - 1;
    t = [0, 0];
    descrim = Math.pow(b, 2) - (4.0 * a * c);
    if (descrim >= 0) {
      t[0] = (-b - Math.sqrt(descrim)) / (2.0 * a);
      t[1] = (-b + Math.sqrt(descrim)) / (2.0 * a);
    }
    intersection = this.Math.add(origin, this.Math.mult(dir, t[1]));
    theta = Math.atan(intersection[0] / intersection[2]) * 57.29577951308323;
    RA = theta;
    /*
    		if theta < 270
    			RA = 270 - RA
    		else
    			theta = 360 + (RA-270)
    */

    phi = Math.acos(intersection[1]) * 57.29577951308323;
    Dec = 90 - phi;
    raDec = new Object();
    raDec.x = RA;
    raDec.y = Dec;
    return raDec;
  };

  SkyView.prototype.keyPressed = function(key) {
    switch (String.fromCharCode(key.which)) {
      case 'i':
        this.rotation[0] -= 0.1;
        this.box.setEvents();
        $('#RA-Dec').text((-this.rotation[1]).toFixed(8) + ", " + (-this.rotation[0]).toFixed(8));
        this.render();
        break;
      case 'k':
        this.rotation[0] += 0.1;
        $('#RA-Dec').text((-this.rotation[1]).toFixed(8) + ", " + (-this.rotation[0]).toFixed(8));
        this.render();
        break;
      case 'l':
        this.rotation[1] += 0.1;
        $('#RA-Dec').text((-this.rotation[1]).toFixed(8) + ", " + (-this.rotation[0]).toFixed(8));
        if (-this.rotation[1] < 0) {
          $('#RA-Dec').text((360 - this.rotation[1]).toFixed(8) + ", " + (-this.rotation[0]).toFixed(8));
        } else if (-this.rotation[1] > 360) {
          $('#RA-Dec').text((this.rotation[1] + 360).toFixed(8) + ", " + (-this.rotation[0]).toFixed(8));
        }
        this.render();
        break;
      case 'j':
        this.rotation[1] -= 0.1;
        $('#RA-Dec').text((-this.rotation[1]).toFixed(8) + ", " + (-this.rotation[0]).toFixed(8));
        if (-this.rotation[1] > 360) {
          $('#RA-Dec').text((this.rotation[1] + 360).toFixed(8) + ", " + (-this.rotation[0]).toFixed(8));
        } else if (-this.rotation[1] < 0) {
          $('#RA-Dec').text((360 - this.rotation[1]).toFixed(8) + ", " + (-this.rotation[0]).toFixed(8));
        }
        this.render();
        break;
      case 'w':
        this.translation[2] += 0.001;
        $('#Scale').text(((-this.translation[2] + 1) * 15).toFixed(2));
        this.render();
        break;
      case 's':
        this.translation[2] -= 0.001;
        $('#Scale').text(((-this.translation[2] + 1) * 15).toFixed(2));
        this.render();
        break;
      case 'W':
        this.translation[2] += 0.01;
        $('#Scale').text(((-this.translation[2] + 1) * 15).toFixed(2));
        this.render();
        break;
      case 'S':
        this.translation[2] -= 0.01;
        $('#Scale').text(((-this.translation[2] + 1) * 15).toFixed(2));
        this.render();
        break;
      case 't':
        this.getBoundingBox();
    }
  };

  return SkyView;

})(WebGL);

BoxOverlay = (function() {

  function BoxOverlay(canvas, view) {
    this.setPan = __bind(this.setPan, this);

    this.setEvents = __bind(this.setEvents, this);

    var _this = this;
    this.canvas = canvas;
    this.ctx = this.canvas.getContext('2d');
    this.ctx.fillStyle = "rgba(0,0,200,.2)";
    this.start = 0;
    this.draw = false;
    this.enabled = true;
    this.end = 0;
    this.view = view;
    this.onBox = null;
    this.canvas.relMouseCoords = function(event) {
      var canvasX, canvasY, currentElement, totalOffsetX, totalOffsetY;
      totalOffsetX = 0;
      totalOffsetY = 0;
      canvasX = 0;
      canvasY = 0;
      currentElement = this;
      while (currentElement = currentElement.offsetParent) {
        totalOffsetX += currentElement.offsetLeft;
        totalOffsetY += currentElement.offsetTop;
      }
      canvasX = event.pageX - totalOffsetX;
      canvasY = event.pageY - totalOffsetY;
      return {
        x: canvasX,
        y: canvasY
      };
    };
    this.boxdown = function(event) {
      _this.start = _this.canvas.relMouseCoords(event);
      _this.draw = true;
      return _this.view._inner_mouse_move = _this.boxmove;
    };
    this.boxmove = function(event) {
      _this.end = _this.canvas.relMouseCoords(event);
      return _this.display();
    };
    this.boxup = function(event) {
      var drawEnd;
      _this.end = _this.canvas.relMouseCoords(event);
      _this.view.notify('box', {
        start: _this.view.getCoordinate(_this.start.x, _this.start.y),
        end: _this.view.getCoordinate(_this.end.x, _this.end.y)
      });
      _this.setPan();
      drawEnd = function() {
        return _this.ctx.clearRect(0, 0, _this.canvas.width, _this.canvas.height);
      };
      return setTimeout(drawEnd, 1000);
    };
  }

  BoxOverlay.prototype.setEvents = function() {
    this.view._inner_mouse_up = this.boxup;
    this.view._inner_mouse_down = this.boxdown;
    return this.view._inner_mouse_move = function() {};
  };

  BoxOverlay.prototype.setPan = function() {
    this.view._inner_mouse_up = this.view.panUp;
    this.view._inner_mouse_down = this.view.panDown;
    return this.view._inner_mouse_move = this.view.panMove;
  };

  BoxOverlay.prototype.display = function() {
    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
    return this.ctx.fillRect(this.start.x, this.start.y, this.end.x - this.start.x, this.end.y - this.start.y);
  };

  return BoxOverlay;

})();
