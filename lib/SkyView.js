// Generated by CoffeeScript 1.3.2
var SkyView,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SkyView = (function(_super) {

  __extends(SkyView, _super);

  SkyView.HTM = 0;

  SkyView.rotation = null;

  SkyView.translation = null;

  SkyView.renderMode = 0;

  SkyView.Math = null;

  function SkyView(options) {
    this.mousePress = __bind(this.mousePress, this);

    this.keyPressed = __bind(this.keyPressed, this);

    this.render = __bind(this.render, this);

    this.getLevel = __bind(this.getLevel, this);

    this.getScale = __bind(this.getScale, this);
    SkyView.__super__.constructor.call(this, options);
    this.Math = new math();
    this.level = 0;
    this.HTM = new HTM(this.level, this.gl, this.Math);
    this.rotation = [0.0, 0.0, 0.0];
    this.translation = [0.0, 0.0, 0.0];
    this.renderMode = this.gl.TRIANGLES;
    this.render();
  }

  SkyView.prototype.getScale = function() {
    return (180.0 * (1.0 - this.translation[2])) / 2;
  };

  SkyView.prototype.getLevel = function() {
    return 180.0 / (Math.pow(2, this.level + 1));
  };

  SkyView.prototype.render = function() {
    this.preRender();
    this.HTM.bind(this.gl, this.shaderProgram);
    this.postRender(this.rotation, this.translation);
    this.HTM.render(this.gl, this.renderMode);
  };

  SkyView.prototype.keyPressed = function(key) {
    switch (String.fromCharCode(key.which)) {
      case 'i':
        this.rotation[0]++;
        break;
      case 'k':
        this.rotation[0]--;
        break;
      case 'l':
        this.rotation[1]++;
        break;
      case 'j':
        this.rotation[1]--;
        break;
      case 'w':
        this.translation[2] += 0.1;
        break;
      case 's':
        this.translation[2] -= 0.1;
        break;
      case '0':
        this.HTM = new HTM(0, this.gl, this.Math);
        break;
      case '1':
        this.HTM = new HTM(1, this.gl, this.Math);
        break;
      case '2':
        this.HTM = new HTM(2, this.gl, this.Math);
        break;
      case '3':
        this.HTM = new HTM(3, this.gl, this.Math);
        break;
      case '4':
        this.HTM = new HTM(4, this.gl, this.Math);
        break;
      case '5':
        this.HTM = new HTM(5, this.gl, this.Math);
        break;
      case '6':
        this.HTM = new HTM(6, this.gl, this.Math);
        break;
      case '7':
        this.HTM = new HTM(7, this.gl, this.Math);
        break;
      case '8':
        this.HTM = new HTM(8, this.gl, this.Math);
    }
    this.render();
  };

  SkyView.prototype.mousePress = function(key) {
    var dir, far, inverse, it, matrices, names, near, origin, success, tri, triangle, _i, _len;
    matrices = this.getMatrices();
    near = [];
    far = [];
    success = GLU.unProject(key.x, this.gl.viewportHeight - key.y, 0.0, matrices[0], matrices[1], matrices[2], near);
    success = GLU.unProject(key.x, this.gl.viewportHeight - key.y, 1.0, matrices[0], matrices[1], matrices[2], far);
    dir = this.Math.subtract(far, near);
    origin = [0.0, 0.0, 0.0, 1.0];
    inverse = mat4.set(matrices[0], mat4.create());
    inverse = mat4.inverse(inverse);
    console.log("inverse", inverse);
    origin = this.Math.multiply(origin, inverse);
    console.log("origin", origin);
    dir = this.Math.norm(dir);
    tri = this.HTM.getTriangles();
    names = this.HTM.getNames();
    console.log("triangles", tri);
    it = -1;
    for (_i = 0, _len = tri.length; _i < _len; _i++) {
      triangle = tri[_i];
      it++;
      if (this.Math.intersectTri(origin, dir, triangle)) {
        console.log("Hit!", names[it], triangle);
        break;
      } else {
        console.log(triangle);
      }
    }
  };

  return SkyView;

})(WebGL);
