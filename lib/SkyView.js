// Generated by CoffeeScript 1.3.2
var SkyView,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SkyView = (function(_super) {

  __extends(SkyView, _super);

  SkyView.gridBlocks = 0;

  SkyView.rotation = null;

  SkyView.translation = null;

  SkyView.renderMode = 0;

  SkyView.Math = null;

  SkyView.it = 0;

  SkyView.selected = "none";

  SkyView.alpha = null;

  function SkyView(options) {
    this.getCoordinate = __bind(this.getCoordinate, this);

    this.getBoundingBox = __bind(this.getBoundingBox, this);

    this.keyPressed = __bind(this.keyPressed, this);

    this.render = __bind(this.render, this);

    this.jump = __bind(this.jump, this);

    this.setScale = __bind(this.setScale, this);

    this.requestAnno = __bind(this.requestAnno, this);

    this.setSDSSAlpha = __bind(this.setSDSSAlpha, this);
    SkyView.__super__.constructor.call(this, options);
    this.translation = [0.0, 0.0, 0.96667];
    this.rotation = [0.0, 0.0, 0.0];
    this.renderMode = this.gl.TRIANGLES;
    this.alpha = 1.0;
    this.Math = new math();
    this.gridBlocks = [];
    $('#RA-Dec').text((-this.rotation[1]).toFixed(8) + ", " + (-this.rotation[0]).toFixed(8));
    $('#Scale').text(((-this.translation[2] + 1) * 15).toFixed(2));
    console.log($('#Scale').text);
    this.render(true);
    return;
  }

  SkyView.prototype.setSDSSAlpha = function(value) {
    this.alpha = value;
    return this.render();
  };

  SkyView.prototype.requestAnno = function(range, time, query, source, color) {
    var imgURL, scale;
    scale = ((-this.translation[2] + 1) * 15) * 3600;
    imgURL = "./lib/createOverlay.php?width=1024&height=1024			&RAMin=" + range.minRA + "&RAMax=" + range.maxRA + "&DecMin=" + range.minDec + "&DecMax=" + range.maxDec + "&scale=1.8&diam=2			&ms=" + time + "&query=" + query + "&type=" + source + "&color=" + color;
    this.gridBlocks.push(new HTM(this.gl, this.Math, "anno", "anno", imgURL, null, range));
  };

  SkyView.prototype.setScale = function() {
    return this.translation[2] = 1 - (document.getElementById("scale").value / 45.0);
  };

  SkyView.prototype.jump = function(RA, Dec) {
    this.rotation[1] = -RA;
    return this.rotation[0] = -Dec;
  };

  SkyView.prototype.render = function(flag) {
    var dec, grid, ra, radius, _i, _len, _ref,
      _this = this;
    if ((flag != null) && flag === true) {
      radius = 15;
      if (radius < 1.0) {
        radius = 1.0;
      }
      ra = -this.rotation[1];
      dec = -this.rotation[0];
      $.ajaxSetup({
        'async': false
      });
      $.getJSON("./lib/webgl/SDSSFieldQuery.php?ra=" + ra + "&dec=" + dec + "&radius=				" + radius + "&zoom=0", function(data) {
        return $.each(data, function(key, val) {
          var fits, fitsFile;
          if (key % 2 === 0) {
            fitsFile = data[key + 1];
            fits = fitsFile.split(".")[0].concat(".").concat(fitsFile.split(".")[1]);
            return _this.gridBlocks.push(new HTM(_this.gl, _this.Math, "sky", "SDSS", "../timProduction/lib/webgl/sdss/" + val, "../timProduction/lib/webgl/sdss/" + fits));
          }
        });
      });
      $.ajaxSetup({
        'async': true
      });
    }
    this.preRender(this.rotation, this.translation);
    _ref = this.gridBlocks;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      grid = _ref[_i];
      if (grid.getSet() === true) {
        grid.bindSphere(this.shaderProgram);
        this.gl.uniform1f(this.shaderProgram.alphaUniform, this.alpha);
        grid.renderSphere(this.renderMode);
      }
    }
  };

  SkyView.prototype.keyPressed = function(key) {
    switch (String.fromCharCode(key.which)) {
      case 'i':
        this.rotation[0] -= 0.1;
        $('#RA-Dec').text((-this.rotation[1]).toFixed(8) + ", " + (-this.rotation[0]).toFixed(8));
        this.render();
        break;
      case 'k':
        this.rotation[0] += 0.1;
        $('#RA-Dec').text((-this.rotation[1]).toFixed(8) + ", " + (-this.rotation[0]).toFixed(8));
        this.render();
        break;
      case 'l':
        this.rotation[1] += 0.1;
        $('#RA-Dec').text((-this.rotation[1]).toFixed(8) + ", " + (-this.rotation[0]).toFixed(8));
        if (-this.rotation[1] < 0) {
          $('#RA-Dec').text((360 - this.rotation[1]).toFixed(8) + ", " + (-this.rotation[0]).toFixed(8));
        } else if (-this.rotation[1] > 360) {
          $('#RA-Dec').text((this.rotation[1] + 360).toFixed(8) + ", " + (-this.rotation[0]).toFixed(8));
        }
        this.render();
        break;
      case 'j':
        this.rotation[1] -= 0.1;
        $('#RA-Dec').text((-this.rotation[1]).toFixed(8) + ", " + (-this.rotation[0]).toFixed(8));
        if (-this.rotation[1] > 360) {
          $('#RA-Dec').text((this.rotation[1] + 360).toFixed(8) + ", " + (-this.rotation[0]).toFixed(8));
        } else if (-this.rotation[1] < 0) {
          $('#RA-Dec').text((360 - this.rotation[1]).toFixed(8) + ", " + (-this.rotation[0]).toFixed(8));
        }
        this.render();
        break;
      case 'w':
        this.translation[2] += 0.001;
        $('#Scale').text(((-this.translation[2] + 1) * 15).toFixed(2));
        this.render(false);
        break;
      case 's':
        this.translation[2] -= 0.001;
        $('#Scale').text(((-this.translation[2] + 1) * 15).toFixed(2));
        this.render();
        break;
      case 'W':
        this.translation[2] += 0.01;
        $('#Scale').text(((-this.translation[2] + 1) * 15).toFixed(2));
        this.render(false);
        break;
      case 'S':
        this.translation[2] -= 0.01;
        $('#Scale').text(((-this.translation[2] + 1) * 15).toFixed(2));
        this.render();
        break;
      case 't':
        this.getBoundingBox();
    }
  };

  SkyView.prototype.getBoundingBox = function() {
    var max, min, range;
    max = this.getCoordinate(this.canvas.width, this.canvas.height);
    min = this.getCoordinate(0, 0);
    range = new Object();
    range.maxRA = max.x;
    range.minRA = min.x;
    range.maxDec = max.y;
    range.minDec = min.y;
    console.log(range);
    return range;
  };

  SkyView.prototype.getCoordinate = function(x, y) {
    var Dec, RA, a, b, c, descrim, dir, far, intersection, inverse, matrices, near, origin, phi, raDec, success, t, theta;
    matrices = this.getMatrices();
    near = [];
    far = [];
    success = GLU.unProject(x, this.gl.viewportHeight - y, 0.0, matrices[0], matrices[1], matrices[2], near);
    success = GLU.unProject(x, this.gl.viewportHeight - y, 1.0, matrices[0], matrices[1], matrices[2], far);
    dir = this.Math.subtract(far, near);
    origin = [0.0, 0.0, 0.0, 1.0];
    inverse = mat4.set(matrices[0], mat4.create());
    inverse = mat4.inverse(inverse);
    origin = this.Math.multiply(origin, inverse);
    dir = this.Math.norm(dir);
    a = this.Math.dot([dir[0], dir[1], dir[2], 1.0], [dir[0], dir[1], dir[2], 1.0]);
    b = this.Math.dot([origin[0], origin[1], origin[2], 0.0], [dir[0], dir[1], dir[2], 1.0]) * 2.0;
    c = this.Math.dot([origin[0], origin[1], origin[2], 0.0], [origin[0], origin[1], origin[2], 0.0]) - 1;
    t = [0, 0];
    descrim = Math.pow(b, 2) - (4.0 * a * c);
    console.log("descrim", descrim);
    console.log("b", b);
    if (descrim >= 0) {
      t[0] = (-b - Math.sqrt(descrim)) / (2.0 * a);
      t[1] = (-b + Math.sqrt(descrim)) / (2.0 * a);
    }
    intersection = this.Math.add(origin, this.Math.mult(dir, t[1]));
    console.log(intersection);
    theta = Math.atan(intersection[0] / intersection[2]) * 57.29577951308323;
    console.log("theta", theta);
    RA = theta;
    /*
    		if theta < 270
    			RA = 270 - RA
    		else
    			theta = 360 + (RA-270)
    */

    phi = Math.acos(intersection[1]) * 57.29577951308323;
    Dec = 90 - phi;
    console.log("RA", RA, "Dec", Dec);
    raDec = new Object();
    raDec.x = RA;
    raDec.y = Dec;
    return raDec;
  };

  return SkyView;

})(WebGL);
