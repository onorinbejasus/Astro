// Generated by CoffeeScript 1.3.2
var SkyView,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SkyView = (function(_super) {

  __extends(SkyView, _super);

  SkyView.HTM = 0;

  SkyView.rotation = null;

  SkyView.translation = null;

  SkyView.renderMode = 0;

  SkyView.Math = null;

  SkyView.it = 0;

  SkyView.selected = "none";

  function SkyView(options) {
    this.mousePress = __bind(this.mousePress, this);

    this.keyPressed = __bind(this.keyPressed, this);

    this.colorClick = __bind(this.colorClick, this);

    this.render = __bind(this.render, this);

    this.setLevel = __bind(this.setLevel, this);

    this.setRotation = __bind(this.setRotation, this);

    this.setScale = __bind(this.setScale, this);
    SkyView.__super__.constructor.call(this, options);
    this.rotation = [0.0, 90.0, 0.0];
    this.translation = [0.0, 0.0, 0.0];
    this.renderMode = this.gl.LINES;
    this.level = 0;
    this.Math = new math();
    this.HTM = new HTM(this.level, this.gl, this.Math);
    this.proj = new Projection();
    this.Map = new Map(this.HTM.getInitTriangles(), this.HTM.getColors(), this.Math, this.HTM.getNames());
    document.getElementById("scale").value = 180.0 / Math.pow(2, this.level + 1);
    this.render();
    return;
  }

  SkyView.prototype.setScale = function() {
    return this.translation[2] = 1 - (document.getElementById("scale").value / 45.0);
  };

  SkyView.prototype.setRotation = function() {
    this.rotation[1] = 90 - parseFloat(document.getElementById("RA").value);
    return this.rotation[0] = parseFloat(document.getElementById("Dec").value);
  };

  SkyView.prototype.setLevel = function() {
    this.level = parseInt(document.getElementById("level").value);
    return this.HTM = new HTM(this.level, this.gl, this.Math);
  };

  SkyView.prototype.render = function() {
    var ra, radius;
    radius = parseFloat(document.getElementById("scale").value);
    ra = parseFloat(document.getElementById("RA").value);
    $.get("./SDSSFieldQuery.php?ra=" + ra + "&dec=" + this.rotation[0] + "&radius=			30&zoom=0");
    this.preRender();
    this.HTM.bind(this.gl, this.shaderProgram);
    this.postRender(this.rotation, this.translation);
    this.HTM.render(this.gl, this.renderMode);
    return this.Map.render(this.level, this.selected);
  };

  SkyView.prototype.colorClick = function(triangle) {
    var VertexColorBuffer, VertexPositionBuffer, color, colors, component, j, k, l, vert, verts, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m;
    verts = [];
    color = [];
    for (_i = 0, _len = triangle.length; _i < _len; _i++) {
      vert = triangle[_i];
      for (_j = 0, _len1 = vert.length; _j < _len1; _j++) {
        component = vert[_j];
        verts.push(component);
      }
    }
    VertexPositionBuffer = this.gl.createBuffer();
    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, VertexPositionBuffer);
    this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(verts), this.gl.STATIC_DRAW);
    VertexPositionBuffer.itemSize = 3;
    VertexPositionBuffer.numItems = 3;
    colors = [[[1.0, 1.0, 0.0, 1.0], [1.0, 1.0, 0.0, 1.0], [1.0, 1.0, 0.0, 1.0]]];
    for (_k = 0, _len2 = colors.length; _k < _len2; _k++) {
      j = colors[_k];
      for (_l = 0, _len3 = j.length; _l < _len3; _l++) {
        k = j[_l];
        for (_m = 0, _len4 = k.length; _m < _len4; _m++) {
          l = k[_m];
          color.push(l);
        }
      }
    }
    VertexColorBuffer = this.gl.createBuffer();
    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, VertexColorBuffer);
    this.gl.bufferData(this.gl.ARRAY_BUFFER, new Float32Array(color), this.gl.STATIC_DRAW);
    VertexColorBuffer.itemSize = 4;
    VertexColorBuffer.numItems = 3;
    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, VertexPositionBuffer);
    this.gl.vertexAttribPointer(this.shaderProgram.vertexPositionAttribute, VertexPositionBuffer.itemSize, this.gl.FLOAT, false, 0, 0);
    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, VertexColorBuffer);
    this.gl.vertexAttribPointer(this.shaderProgram.vertexColorAttribute, VertexColorBuffer.itemSize, this.gl.FLOAT, false, 0, 0);
    return this.gl.drawArrays(this.gl.TRIANGLES, 0, VertexPositionBuffer.numItems);
  };

  SkyView.prototype.keyPressed = function(key) {
    switch (String.fromCharCode(key.which)) {
      case 'i':
        this.rotation[0]--;
        document.getElementById("Dec").value = -this.rotation[0];
        this.render();
        break;
      case 'k':
        this.rotation[0]++;
        document.getElementById("Dec").value = -this.rotation[0];
        this.render();
        break;
      case 'l':
        this.rotation[1]++;
        document.getElementById("RA").value = 90 - this.rotation[1];
        if (document.getElementById("RA").value < 0) {
          document.getElementById("RA").value = 360 + 90 - this.rotation[1];
        } else if (document.getElementById("RA").value > 360) {
          document.getElementById("RA").value = 90 - this.rotation[1] - 360;
        }
        this.render();
        break;
      case 'j':
        this.rotation[1]--;
        document.getElementById("RA").value = 90 - this.rotation[1];
        if (document.getElementById("RA").value > 360) {
          document.getElementById("RA").value = 90 - this.rotation[1] - 360;
        } else if (document.getElementById("RA").value < 0) {
          document.getElementById("RA").value = 360 + 90 - this.rotation[1];
        }
        this.render();
        break;
      case 'w':
        this.translation[2] += 0.1;
        this.render();
        break;
      case 's':
        this.translation[2] -= 0.1;
        this.render();
        break;
      case '1':
        this.level = 1;
        document.getElementById('level').value = 1;
        this.HTM = new HTM(this.level, this.gl, this.Math);
        document.getElementById("scale").value = 180.0 / Math.pow(2, this.level + 1);
        this.render();
        break;
      case '2':
        this.level = 2;
        document.getElementById('level').value = 2;
        this.HTM = new HTM(this.level, this.gl, this.Math);
        document.getElementById("scale").value = 180.0 / Math.pow(2, this.level + 1);
        this.render();
        break;
      case '3':
        this.level = 3;
        document.getElementById('level').value = 3;
        this.HTM = new HTM(this.level, this.gl, this.Math);
        document.getElementById("scale").value = 180.0 / Math.pow(2, this.level + 1);
        this.render();
        break;
      case '4':
        this.level = 4;
        document.getElementById('level').value = 4;
        this.HTM = new HTM(this.level, this.gl, this.Math);
        document.getElementById("scale").value = 180.0 / Math.pow(2, this.level + 1);
        this.render();
        break;
      case '5':
        this.level = 5;
        document.getElementById('level').value = 5;
        this.HTM = new HTM(this.level, this.gl, this.Math);
        document.getElementById("scale").value = 180.0 / Math.pow(2, this.level + 1);
        this.render();
        break;
      case '6':
        this.level = 6;
        document.getElementById('level').value = 6;
        this.HTM = new HTM(this.level, this.gl, this.Math);
        document.getElementById("scale").value = 180.0 / Math.pow(2, this.level + 1);
        this.render();
        break;
      case '7':
        this.level = 7;
        document.getElementById('level').value = 7;
        this.HTM = new HTM(this.level, this.gl, this.Math);
        document.getElementById("scale").value = 180.0 / Math.pow(2, this.level + 1);
        this.render();
        break;
      case '8':
        this.level = 8;
        document.getElementById('level').value = 8;
        this.HTM = new HTM(this.level, this.gl, this.Math);
        document.getElementById("scale").value = 180.0 / Math.pow(2, this.level + 1);
        this.render();
        break;
      case '9':
        this.level = 9;
        document.getElementById('level').value = 9;
        this.HTM = new HTM(this.level, this.gl, this.Math);
        document.getElementById("scale").value = 180.0 / Math.pow(2, this.level + 1);
        this.render();
        break;
      case '0':
        this.level = 0;
        document.getElementById('level').value = 0;
        this.HTM = new HTM(this.level, this.gl, this.Math);
        document.getElementById("scale").value = 180.0 / Math.pow(2, this.level + 1);
        this.render();
    }
  };

  SkyView.prototype.mousePress = function(key) {
    var dir, far, inverse, it, matrices, names, near, origin, success, tri, triangle, _i, _len;
    if (key.x > 500 || key.y > 500) {
      return;
    }
    matrices = this.getMatrices();
    near = [];
    far = [];
    success = GLU.unProject(key.x, this.gl.viewportHeight - key.y, 0.0, matrices[0], matrices[1], matrices[2], near);
    success = GLU.unProject(key.x, this.gl.viewportHeight - key.y, 1.0, matrices[0], matrices[1], matrices[2], far);
    dir = this.Math.subtract(far, near);
    origin = [0.0, 0.0, 0.0, 1.0];
    inverse = mat4.set(matrices[0], mat4.create());
    inverse = mat4.inverse(inverse);
    origin = this.Math.multiply(origin, inverse);
    dir = this.Math.norm(dir);
    tri = this.HTM.getTriangles();
    names = this.HTM.getNames();
    it = -1;
    for (_i = 0, _len = tri.length; _i < _len; _i++) {
      triangle = tri[_i];
      it = it + 1;
      if (this.Math.intersectTri(origin, dir, triangle)) {
        console.log(names[it]);
        this.selected = names[it];
        this.render();
        this.colorClick(triangle);
        break;
      }
    }
  };

  return SkyView;

})(WebGL);
